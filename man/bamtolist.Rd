% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combine_bam.R
\name{bamtolist}
\alias{bamtolist}
\title{From BAM files to lists of data tables or GRangesList objects.}
\usage{
bamtolist(bamfolder, annotation, transcript_align = TRUE,
  name_samples = NULL, rm_version = FALSE, granges = FALSE)
}
\arguments{
\item{bamfolder}{Character string specifying the path to the folder storing
BAM files.}

\item{annotation}{Data table as generated by \code{\link{create_annotation}}.
Please make sure the name of reference transcripts in the annotation data
table match those in the BAM files (see \code{rm_version}).}

\item{transcript_align}{Logical value whether BAM files in \code{bamfolder}
come from a transcriptome alignment (intended as an alignment against
reference transcript sequences, see \code{Details}). If TRUE (the default),
reads mapping on the negative strand should not be present and, if any,
they are automatically removed.}

\item{name_samples}{Named character string vector specifying the desired name
for the output list elements. A character string for each BAM file in
\code{bamfolder} is required. Plase be careful to name each element of the
vector after the correct corresponding BAM file in \code{bamfolder},
leaving their path and extension out. No specific order is required.
Default is NULL i.e. list elements are named after the name of the BAM
files, leaving their path and extension out.}

\item{rm_version}{Logical value whether to remove the transcript version at
the end of their ID, usually dot-separated. It might be required to make
the transcripts IDs in the BAM files match those in the annotation table.
Default is FALSE.}

\item{granges}{Logical value whether to return a GRangesList object. Default
is FALSE i.e. a list of data tables is returned instead (the required input
for \code{\link{length_filter}}, \code{\link{psite}},
\code{\link{psite_info}}, \code{\link{rends_heat}} and
\code{\link{rlength_distr}}).}
}
\value{
A list of data tables or a GRangesList object.
}
\description{
This function reads one or multiple BAM files converting them into data
tables or GRanges objects, arranged in a list or a GRangesList, respectively.
In both cases the list elements contain, for each read: i) the name of the
corresponding reference sequence (i.e. of the transcript on which it aligns);
ii) its leftmost and rightmost position with respect to the 1st nucleotide of
the reference sequence; iii) its length; iv) the leftmost and rightmost
position of the annotated CDS of the reference sequence (if any) with respect
to its 1st nucleotide. Please note: start and stop codon positions for
transcripts without annotated CDS are set to 0.
}
\details{
\strong{riboWaltz} only works for read alignments based on
  transcript coordinates. This choice is due to the main purpose of RiboSeq
  assays to study translational events through the isolation and sequencing
  of ribosome protected fragments. Most reads from RiboSeq are supposed to
  map on mRNAs and not on introns and intergenic regions. Nevertheless, BAM
  based on transcript coordinates can be generated in two ways: i) aligning
  directly against transcript sequences; ii) aligning against standard
  chromosome sequences, requiring the outputs to be translated in transcript
  coordinates. The first option can be easily handled by many aligners (e.g.
  Bowtie), given a reference FASTA file where each sequence represents a
  transcript, from the beginning of the 5' UTR to the end of the 3' UTR. The
  second procedure is based on reference FASTA files where each sequence
  represents a chromosome, usually coupled with comprehensive gene annotation
  files (GTF or GFF). The STAR aligner, with its option --quantMode
  TranscriptomeSAM (see Chapter 6 of its
  \href{http://labshare.cshl.edu/shares/gingeraslab/www-data/dobin/STAR/STAR.posix/doc/STARmanual.pdf}{manual}),
   is an example of tool providing such a feature.
}
\examples{
## path_bam <- "path/to/BAM/files"
## bamtolist(bamfolder = path_bam, annotation = mm81cdna)
}
